// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!

pub fn wasmExportDeleteUser(p0 : Int, p1 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let (result0) : (GetUserInfoResult) = delete_user(result);
      let return_area = @ffi.malloc(36)

      match result0 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload3) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, (payload3).base64_profile_jpg.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr((payload3).base64_profile_jpg))
                  @ffi.store32((return_area) + 16, (payload3).user_handle.iter().count())
                  @ffi.store32((return_area) + 12, @ffi.str2ptr((payload3).user_handle))
                  @ffi.store32((return_area) + 24, (payload3).user_xid.iter().count())
                  @ffi.store32((return_area) + 20, @ffi.str2ptr((payload3).user_xid))
                  @ffi.store32((return_area) + 32, (payload3).worker_urn.iter().count())
                  @ffi.store32((return_area) + 28, @ffi.str2ptr((payload3).worker_urn))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportDeleteUserPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))
                  @ffi.free(@ffi.load32((p0) + 12))
                  @ffi.free(@ffi.load32((p0) + 20))
                  @ffi.free(@ffi.load32((p0) + 28))

            }
      }

}

pub fn wasmExportGetUserInfo(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (GetUserInfoResult) = get_user_info(result, result0);
      let return_area = @ffi.malloc(36)

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, (payload4).base64_profile_jpg.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr((payload4).base64_profile_jpg))
                  @ffi.store32((return_area) + 16, (payload4).user_handle.iter().count())
                  @ffi.store32((return_area) + 12, @ffi.str2ptr((payload4).user_handle))
                  @ffi.store32((return_area) + 24, (payload4).user_xid.iter().count())
                  @ffi.store32((return_area) + 20, @ffi.str2ptr((payload4).user_xid))
                  @ffi.store32((return_area) + 32, (payload4).worker_urn.iter().count())
                  @ffi.store32((return_area) + 28, @ffi.str2ptr((payload4).worker_urn))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportGetUserInfoPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))
                  @ffi.free(@ffi.load32((p0) + 12))
                  @ffi.free(@ffi.load32((p0) + 20))
                  @ffi.free(@ffi.load32((p0) + 28))

            }
      }

}

pub fn wasmExportUpdateProfilePicture(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (SuccessOrFailureResult) = update_profile_picture(result, result0);
      let return_area = @ffi.malloc(12)

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload4.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload4))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportUpdateProfilePicturePostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedFollowing(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (FollowingResult) = forwarded_following(result, result0);
      let return_area = @ffi.malloc(12)

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))

                  let address = @ffi.malloc(((payload4).user_xids).length() * 8);
                  for index = 0; index < ((payload4).user_xids).length(); index = index + 1 {
                        let element5 : String = ((payload4).user_xids)[(index)]
                        let base6 = address + (index * 8);
                        @ffi.store32((base6) + 4, element5.iter().count())
                        @ffi.store32((base6) + 0, @ffi.str2ptr(element5))

                  }
                  @ffi.store32((return_area) + 8, ((payload4).user_xids).length())
                  @ffi.store32((return_area) + 4, address)

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedFollowingPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {

                  for index = 0; index < (@ffi.load32((p0) + 8)); index = index + 1 {
                        let base3 = (@ffi.load32((p0) + 4)) + (index * 8)
                        @ffi.free(@ffi.load32((base3) + 0))

                  }
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedFollowUser(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (SuccessOrFailureResult) = forwarded_follow_user(result, result0);
      let return_area = @ffi.malloc(12)

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload4.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload4))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedFollowUserPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedUnfollowUser(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (SuccessOrFailureResult) = forwarded_unfollow_user(result, result0);
      let return_area = @ffi.malloc(12)

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload4.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload4))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedUnfollowUserPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedPostTweet(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int, p5 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let result1 = @ffi.ptr2str(p4)

      let (result2) : (SuccessOrFailureResult) = forwarded_post_tweet(result, result0, result1);
      let return_area = @ffi.malloc(12)

      match result2 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload5) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload5.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload5))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedPostTweetPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedGetTweet(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int, p5 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let result1 = @ffi.ptr2str(p4)

      let (result2) : (SuccessOrFailureResult) = forwarded_get_tweet(result, result0, result1);
      let return_area = @ffi.malloc(12)

      match result2 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload5) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload5.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload5))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedGetTweetPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedListAllFollowedTweets(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int, p5 : Int, p6 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let result1 = @ffi.ptr2str(p5)

      let (result2) : (ListTweetsResult) = forwarded_list_all_followed_tweets(result, result0, (p4).to_uint(), result1);
      let return_area = @ffi.malloc(12)

      match result2 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload5) => {
                  @ffi.store8((return_area) + 0, (1))

                  let address = @ffi.malloc(((payload5).tweets).length() * 24);
                  for index = 0; index < ((payload5).tweets).length(); index = index + 1 {
                        let element6 : Tweet = ((payload5).tweets)[(index)]
                        let base7 = address + (index * 24);
                        @ffi.store32((base7) + 4, (element6).user_xid.iter().count())
                        @ffi.store32((base7) + 0, @ffi.str2ptr((element6).user_xid))
                        @ffi.store32((base7) + 12, (element6).tweet_contents.iter().count())
                        @ffi.store32((base7) + 8, @ffi.str2ptr((element6).tweet_contents))
                        @ffi.store32((base7) + 20, (element6).tweet_xid.iter().count())
                        @ffi.store32((base7) + 16, @ffi.str2ptr((element6).tweet_xid))

                  }
                  @ffi.store32((return_area) + 8, ((payload5).tweets).length())
                  @ffi.store32((return_area) + 4, address)

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedListAllFollowedTweetsPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {

                  for index = 0; index < (@ffi.load32((p0) + 8)); index = index + 1 {
                        let base3 = (@ffi.load32((p0) + 4)) + (index * 24)
                        @ffi.free(@ffi.load32((base3) + 0))
                        @ffi.free(@ffi.load32((base3) + 8))
                        @ffi.free(@ffi.load32((base3) + 16))

                  }
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportForwardedListUserTweets(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int, p5 : Int, p6 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let result1 = @ffi.ptr2str(p5)

      let (result2) : (ListTweetsResult) = forwarded_list_user_tweets(result, result0, (p4).to_uint(), result1);
      let return_area = @ffi.malloc(12)

      match result2 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload5) => {
                  @ffi.store8((return_area) + 0, (1))

                  let address = @ffi.malloc(((payload5).tweets).length() * 24);
                  for index = 0; index < ((payload5).tweets).length(); index = index + 1 {
                        let element6 : Tweet = ((payload5).tweets)[(index)]
                        let base7 = address + (index * 24);
                        @ffi.store32((base7) + 4, (element6).user_xid.iter().count())
                        @ffi.store32((base7) + 0, @ffi.str2ptr((element6).user_xid))
                        @ffi.store32((base7) + 12, (element6).tweet_contents.iter().count())
                        @ffi.store32((base7) + 8, @ffi.str2ptr((element6).tweet_contents))
                        @ffi.store32((base7) + 20, (element6).tweet_xid.iter().count())
                        @ffi.store32((base7) + 16, @ffi.str2ptr((element6).tweet_xid))

                  }
                  @ffi.store32((return_area) + 8, ((payload5).tweets).length())
                  @ffi.store32((return_area) + 4, address)

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportForwardedListUserTweetsPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {

                  for index = 0; index < (@ffi.load32((p0) + 8)); index = index + 1 {
                        let base3 = (@ffi.load32((p0) + 4)) + (index * 24)
                        @ffi.free(@ffi.load32((base3) + 0))
                        @ffi.free(@ffi.load32((base3) + 8))
                        @ffi.free(@ffi.load32((base3) + 16))

                  }
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportRegisterNewUser(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int, p5 : Int, p6 : Int, p7 : Int, p8 : Int64, p9 : Int, p10 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let result1 = @ffi.ptr2str(p4)

      let result2 = @ffi.ptr2str(p6)

      let result3 = @ffi.ptr2str(p9)

      let (result4) : (UserAuthResult) = register_new_user(result, result0, result1, result2, (p8).to_uint64(), result3);
      let return_area = @ffi.malloc(20)

      match result4 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload7) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, (payload7).user_xid.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr((payload7).user_xid))
                  @ffi.store32((return_area) + 16, (payload7).user_jwt.iter().count())
                  @ffi.store32((return_area) + 12, @ffi.str2ptr((payload7).user_jwt))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportRegisterNewUserPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))
                  @ffi.free(@ffi.load32((p0) + 12))

            }
      }

}

pub fn wasmExportUserLogin(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int, p5 : Int, p6 : Int64, p7 : Int, p8 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let result1 = @ffi.ptr2str(p4)

      let result2 = @ffi.ptr2str(p7)

      let (result3) : (UserAuthResult) = user_login(result, result0, result1, (p6).to_uint64(), result2);
      let return_area = @ffi.malloc(20)

      match result3 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload6) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, (payload6).user_xid.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr((payload6).user_xid))
                  @ffi.store32((return_area) + 16, (payload6).user_jwt.iter().count())
                  @ffi.store32((return_area) + 12, @ffi.str2ptr((payload6).user_jwt))

                  ()
            }
            _ => panic()
      }
      @ffi.free(return_area)
      return return_area

}

pub fn wasmExportUserLoginPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))
                  @ffi.free(@ffi.load32((p0) + 12))

            }
      }

}

