// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!

pub fn wasmExportGetUserInfo(p0 : Int, _p1 : Int, p2 : Int, _p3 : Int) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 : GetUserInfoResult = get_user_info(result, result0)
  let return_area = @ffi.malloc(28)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload4.base64_profile_jpg.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload4.base64_profile_jpg))
      @ffi.store32(return_area + 16, payload4.user_handle.iter().count())
      @ffi.store32(return_area + 12, @ffi.str2ptr(payload4.user_handle))
      @ffi.store32(return_area + 24, payload4.user_xid.iter().count())
      @ffi.store32(return_area + 20, @ffi.str2ptr(payload4.user_xid))
      ()
    }
    // _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportGetUserInfoPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => {
      @ffi.free(@ffi.load32(p0 + 4))
      @ffi.free(@ffi.load32(p0 + 12))
      @ffi.free(@ffi.load32(p0 + 20))
    }
    _ => ()
  }
}

pub fn wasmExportUpdateProfilePicture(
  p0 : Int,
  _p1 : Int,
  p2 : Int,
  _p3 : Int
) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 : UpdateProfilePictureResult = update_profile_picture(
    result, result0,
  )
  let return_area = @ffi.malloc(12)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload4.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload4))
      ()
    }
    // _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportUpdateProfilePicturePostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => @ffi.free(@ffi.load32(p0 + 4))
    _ => ()
  }
}

pub fn wasmExportRegisterNewUser(
  p0 : Int,
  _p1 : Int,
  p2 : Int,
  _p3 : Int,
  p4 : Int,
  _p5 : Int,
  p6 : Int,
  _p7 : Int,
  p8 : Int64,
  p9 : Int,
  _p10 : Int
) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 = @ffi.ptr2str(p4)
  let result2 = @ffi.ptr2str(p6)
  let result3 = @ffi.ptr2str(p9)
  let result4 : UserAuthResult = register_new_user(
    result,
    result0,
    result1,
    result2,
    p8.to_uint64(),
    result3,
  )
  let return_area = @ffi.malloc(20)
  match result4 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload7) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload7.user_xid.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload7.user_xid))
      @ffi.store32(return_area + 16, payload7.user_jwt.iter().count())
      @ffi.store32(return_area + 12, @ffi.str2ptr(payload7.user_jwt))
      ()
    }
    // _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportRegisterNewUserPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => {
      @ffi.free(@ffi.load32(p0 + 4))
      @ffi.free(@ffi.load32(p0 + 12))
    }
    _ => ()
  }
}

pub fn wasmExportUserLogin(
  p0 : Int,
  _p1 : Int,
  p2 : Int,
  _p3 : Int,
  p4 : Int,
  _p5 : Int,
  p6 : Int64,
  p7 : Int,
  _p8 : Int
) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 = @ffi.ptr2str(p4)
  let result2 = @ffi.ptr2str(p7)
  let result3 : UserAuthResult = user_login(
    result,
    result0,
    result1,
    p6.to_uint64(),
    result2,
  )
  let return_area = @ffi.malloc(20)
  match result3 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload6) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload6.user_xid.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload6.user_xid))
      @ffi.store32(return_area + 16, payload6.user_jwt.iter().count())
      @ffi.store32(return_area + 12, @ffi.str2ptr(payload6.user_jwt))
      ()
    }
    // _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportUserLoginPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => {
      @ffi.free(@ffi.load32(p0 + 4))
      @ffi.free(@ffi.load32(p0 + 12))
    }
    _ => () // GML
  }
}
