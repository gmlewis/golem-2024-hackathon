package golem:component;

interface api {
  // records
  record user-auth-info {
    user-xid: string,
    user-jwt: string,
  }

  record user-info {
    base64-profile-jpg: string,
    user-handle: string,
    user-xid: string,
    worker-urn: string,
  }

  record list-following {
    user-xids: list<string>,
  }

  record tweet {
    user-xid: string,
    tweet-contents: string,
    tweet-xid: string,
  }

  record list-tweets {
    tweets: list<tweet>,
  }

  // variants
  variant following-result {
    error(string),
    success(list-following),
  }

  variant get-user-info-result {
    error(string),
    success(user-info),
  }

  variant list-tweets-result {
    error(string),
    success(list-tweets),
  }

  variant success-or-failure-result {
    error(string),
    success(string),
  }

  variant user-auth-result {
    error(string),
    success(user-auth-info),
  }

  // JWT-protected endpoints
  delete-user: func(
    jwt: string) -> get-user-info-result;

  get-user-info: func(
    user-handle: string,
    jwt: string) -> get-user-info-result;

  update-profile-picture: func(
    base64-profile-jpg: string,
    jwt: string) -> success-or-failure-result;

  // JWT-protected endpoints that are forwarded to individual `user` workers
  forwarded-following: func(
    user-xid: string,
    jwt: string) -> following-result;

  forwarded-follow-user: func(
    other-user-xid: string,
    jwt: string) -> success-or-failure-result;

  forwarded-unfollow-user: func(
    other-user-xid: string,
    jwt: string) -> success-or-failure-result;

  forwarded-post-tweet: func(
    tweet-contents: string,
    tweet-xid: string,
    jwt: string) -> success-or-failure-result;

  forwarded-get-tweet: func(
    user-xid: string,
    tweet-xid: string,
    jwt: string) -> success-or-failure-result;

  forwarded-list-all-followed-tweets: func(
    user-xid: string,
    before: string,
    limit: u32,
    jwt: string) -> list-tweets-result;

  forwarded-list-user-tweets: func(
    user-xid: string,
    before: string,
    limit: u32,
    jwt: string) -> list-tweets-result;

  // HMAC-protected endpoints
  register-new-user: func(
    user-handle: string,
    user-password: string,
    user-xid: string,
    client-id: string,
    timestamp-millis: u64,
    hmac-hash: string) -> user-auth-result;

  user-login: func(
    user-handle: string,
    user-password: string,
    client-id: string,
    timestamp-millis: u64,
    hmac-hash: string) -> user-auth-result;

  // Below this point are the definitions created by `golem-cli stubgen`
  // so that the `user-manager` singleton worker can make RPC worker-to-worker
  // calls to the `user` workers.
  // use golem:rpc/types@0.1.0.{uri as golem-rpc-uri};
  // use wasi:io/poll@0.2.0.{pollable as wasi-io-pollable};
  // use golem:component/api.{list-following};
  // use golem:component/api.{tweet};
  // use golem:component/api.{list-tweets};
  // use golem:component/api.{following-result};
  // use golem:component/api.{list-tweets-result};
  // use golem:component/api.{success-or-failure-result};

  // resource future-following-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<following-result>;
  // }
  // resource future-follow-user-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<success-or-failure-result>;
  // }
  // resource future-unfollow-user-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<success-or-failure-result>;
  // }
  // resource future-post-tweet-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<success-or-failure-result>;
  // }
  // resource future-get-tweet-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<success-or-failure-result>;
  // }
  // resource future-list-all-followed-tweets-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<list-tweets-result>;
  // }
  // resource future-list-user-tweets-result {
  //   subscribe: func() -> wasi-io-pollable;
  //   get: func() -> option<list-tweets-result>;
  // }
  // resource api {
  //   constructor(location: golem-rpc-uri);
  //   blocking-following: func() -> following-result;
  //   following: func() -> future-following-result;
  //   blocking-follow-user: func(other-user-xid: string, other-user-worker: string) -> success-or-failure-result;
  //   follow-user: func(other-user-xid: string, other-user-worker: string) -> future-follow-user-result;
  //   blocking-unfollow-user: func(other-user-xid: string) -> success-or-failure-result;
  //   unfollow-user: func(other-user-xid: string) -> future-unfollow-user-result;
  //   blocking-post-tweet: func(tweet-contents: string, tweet-xid: string) -> success-or-failure-result;
  //   post-tweet: func(tweet-contents: string, tweet-xid: string) -> future-post-tweet-result;
  //   blocking-get-tweet: func(tweet-xid: string) -> success-or-failure-result;
  //   get-tweet: func(tweet-xid: string) -> future-get-tweet-result;
  //   blocking-list-all-followed-tweets: func(before: string, limit: u32) -> list-tweets-result;
  //   list-all-followed-tweets: func(before: string, limit: u32) -> future-list-all-followed-tweets-result;
  //   blocking-list-user-tweets: func(user-xid: string, before: string, limit: u32) -> list-tweets-result;
  //   list-user-tweets: func(user-xid: string, before: string, limit: u32) -> future-list-user-tweets-result;
  // }

}

world user-manager {
  import wasi:cli/environment@0.2.0;
  import wasi:cli/stderr@0.2.0;
  import wasi:clocks/wall-clock@0.2.0;
  import golem:api/host@0.2.0;
  import golem:api/save-snapshot@0.2.0;
  import golem:api/load-snapshot@0.2.0;
  export api;
}