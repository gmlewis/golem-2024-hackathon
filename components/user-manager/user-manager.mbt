// Generated by `wit-bindgen` 0.29.0.

/// The `user-manager` component handles all user authentication, profiles, and info.
/// It is deployed as a singleton worker. For every user that is created, a new
/// `user` worker is spawned and kept track of by the `user-manager` (whose job
/// it is to keep track of all follows and tweets for a single user).
/// Each user is created with a globally-unique XID such that in the future, it will
/// be possible to change a user's public "@handle" easily (if the new handle is available)
/// without the need for anything else changing in the backend.

pub fn FutureFollowingResult::subscribe(
  self : FutureFollowingResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FutureFollowingResult::get(
  self : FutureFollowingResult
) -> FollowingResult? {
  abort("todo")
}

pub fn FutureFollowUserResult::subscribe(
  self : FutureFollowUserResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FutureFollowUserResult::get(
  self : FutureFollowUserResult
) -> SuccessOrFailureResult? {
  abort("todo")
}

pub fn FutureUnfollowUserResult::subscribe(
  self : FutureUnfollowUserResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FutureUnfollowUserResult::get(
  self : FutureUnfollowUserResult
) -> SuccessOrFailureResult? {
  abort("todo")
}

pub fn FuturePostTweetResult::subscribe(
  self : FuturePostTweetResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FuturePostTweetResult::get(
  self : FuturePostTweetResult
) -> SuccessOrFailureResult? {
  abort("todo")
}

pub fn FutureGetTweetResult::subscribe(
  self : FutureGetTweetResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FutureGetTweetResult::get(
  self : FutureGetTweetResult
) -> SuccessOrFailureResult? {
  abort("todo")
}

pub fn FutureListAllFollowedTweetsResult::subscribe(
  self : FutureListAllFollowedTweetsResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FutureListAllFollowedTweetsResult::get(
  self : FutureListAllFollowedTweetsResult
) -> ListTweetsResult? {
  abort("todo")
}

pub fn FutureListUserTweetsResult::subscribe(
  self : FutureListUserTweetsResult
) -> @poll.Pollable {
  abort("todo")
}

pub fn FutureListUserTweetsResult::get(
  self : FutureListUserTweetsResult
) -> ListTweetsResult? {
  abort("todo")
}

pub fn Api::api(location : @types.Uri) -> Api {
  abort("todo")
}

pub fn Api::blocking_following(self : Api) -> FollowingResult {
  abort("todo")
}

pub fn Api::following(self : Api) -> FutureFollowingResult {
  abort("todo")
}

pub fn Api::blocking_follow_user(
  self : Api,
  other_user_xid : String,
  other_user_worker : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn Api::follow_user(
  self : Api,
  other_user_xid : String,
  other_user_worker : String
) -> FutureFollowUserResult {
  abort("todo")
}

pub fn Api::blocking_unfollow_user(
  self : Api,
  other_user_xid : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn Api::unfollow_user(
  self : Api,
  other_user_xid : String
) -> FutureUnfollowUserResult {
  abort("todo")
}

pub fn Api::blocking_post_tweet(
  self : Api,
  tweet_contents : String,
  tweet_xid : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn Api::post_tweet(
  self : Api,
  tweet_contents : String,
  tweet_xid : String
) -> FuturePostTweetResult {
  abort("todo")
}

pub fn Api::blocking_get_tweet(
  self : Api,
  tweet_xid : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn Api::get_tweet(self : Api, tweet_xid : String) -> FutureGetTweetResult {
  abort("todo")
}

pub fn Api::blocking_list_all_followed_tweets(
  self : Api,
  before : String,
  limit : UInt
) -> ListTweetsResult {
  abort("todo")
}

pub fn Api::list_all_followed_tweets(
  self : Api,
  before : String,
  limit : UInt
) -> FutureListAllFollowedTweetsResult {
  abort("todo")
}

pub fn Api::blocking_list_user_tweets(
  self : Api,
  user_xid : String,
  before : String,
  limit : UInt
) -> ListTweetsResult {
  abort("todo")
}

pub fn Api::list_user_tweets(
  self : Api,
  user_xid : String,
  before : String,
  limit : UInt
) -> FutureListUserTweetsResult {
  abort("todo")
}
