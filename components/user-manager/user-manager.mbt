// Generated by `wit-bindgen` 0.29.0.

/// The `user-manager` component handles all user authentication, profiles, and info.
/// It is deployed as a singleton worker. For every user that is created, a new
/// `user` worker is spawned and kept track of by the `user-manager` (whose job
/// it is to keep track of all follows and tweets for a single user).
/// Each user is created with a globally-unique XID such that in the future, it will
/// be possible to change a user's public "@handle" easily (if the new handle is available)
/// without the need for anything else changing in the backend.
// Generated by `wit-bindgen` 0.29.0.
/// JWT-protected endpoints
pub fn delete_user(jwt : String) -> GetUserInfoResult {
  abort("todo")
}

pub fn get_user_info(user_handle : String, jwt : String) -> GetUserInfoResult {
  abort("todo")
}

pub fn update_profile_picture(
  base64_profile_jpg : String,
  jwt : String
) -> SuccessOrFailureResult {
  abort("todo")
}

/// JWT-protected endpoints that are forwarded to individual `user` workers
pub fn following(user_xid : String, jwt : String) -> FollowingResult {
  abort("todo")
}

pub fn follow_user(
  other_user_xid : String,
  jwt : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn unfollow_user(
  other_user_xid : String,
  jwt : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn post_tweet(
  tweet_contents : String,
  tweet_xid : String,
  jwt : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn get_tweet(
  user_xid : String,
  tweet_xid : String,
  jwt : String
) -> SuccessOrFailureResult {
  abort("todo")
}

pub fn list_all_followed_tweets(
  user_xid : String,
  before : String,
  limit : UInt,
  jwt : String
) -> ListTweetsResult {
  abort("todo")
}

pub fn list_user_tweets(
  user_xid : String,
  before : String,
  limit : UInt,
  jwt : String
) -> ListTweetsResult {
  abort("todo")
}

/// HMAC-protected endpoints
pub fn register_new_user(
  user_handle : String,
  user_password : String,
  user_xid : String,
  client_id : String,
  timestamp_millis : UInt64,
  hmac_hash : String
) -> UserAuthResult {
  abort("todo")
}

pub fn user_login(
  user_handle : String,
  user_password : String,
  client_id : String,
  timestamp_millis : UInt64,
  hmac_hash : String
) -> UserAuthResult {
  abort("todo")
}
