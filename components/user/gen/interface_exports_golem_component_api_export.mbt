// Generated by `wit-bindgen` 0.30.0. DO NOT EDIT!

pub fn wasmExportFollowing() -> Int {

      let (result) : (@api.FollowingResult) = @api.following();

      match result {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload2) => {
                  @ffi.store8((return_area) + 0, (1))

                  let address = @ffi.malloc(((payload2).user_xids).length() * 8);
                  for index = 0; index < ((payload2).user_xids).length(); index = index + 1 {
                        let element3 : String = ((payload2).user_xids)[(index)]
                        let base4 = address + (index * 8);
                        @ffi.store32((base4) + 4, element3.iter().count())
                        @ffi.store32((base4) + 0, @ffi.str2ptr(element3))

                  }
                  @ffi.store32((return_area) + 8, ((payload2).user_xids).length())
                  @ffi.store32((return_area) + 4, address)

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportFollowingPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {

                  for index = 0; index < (@ffi.load32((p0) + 8)); index = index + 1 {
                        let base3 = (@ffi.load32((p0) + 4)) + (index * 8)
                        @ffi.free(@ffi.load32((base3) + 0))

                  }
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportFollowUser(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (@api.SuccessOrFailureResult) = @api.follow_user(result, result0);

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload4.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload4))

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportFollowUserPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportUnfollowUser(p0 : Int, p1 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let (result0) : (@api.SuccessOrFailureResult) = @api.unfollow_user(result);

      match result0 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload3) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload3.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload3))

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportUnfollowUserPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportPostTweet(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (@api.SuccessOrFailureResult) = @api.post_tweet(result, result0);

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload4.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload4))

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportPostTweetPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportGetTweet(p0 : Int, p1 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let (result0) : (@api.SuccessOrFailureResult) = @api.get_tweet(result);

      match result0 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload3) => {
                  @ffi.store8((return_area) + 0, (1))
                  @ffi.store32((return_area) + 8, payload3.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload3))

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportGetTweetPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportListAllFollowedTweets(p0 : Int, p1 : Int, p2 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let (result0) : (@api.ListTweetsResult) = @api.list_all_followed_tweets(result, (p2).to_uint());

      match result0 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload3) => {
                  @ffi.store8((return_area) + 0, (1))

                  let address = @ffi.malloc(((payload3).tweets).length() * 24);
                  for index = 0; index < ((payload3).tweets).length(); index = index + 1 {
                        let element4 : @api.Tweet = ((payload3).tweets)[(index)]
                        let base5 = address + (index * 24);
                        @ffi.store32((base5) + 4, (element4).user_xid.iter().count())
                        @ffi.store32((base5) + 0, @ffi.str2ptr((element4).user_xid))
                        @ffi.store32((base5) + 12, (element4).tweet_contents.iter().count())
                        @ffi.store32((base5) + 8, @ffi.str2ptr((element4).tweet_contents))
                        @ffi.store32((base5) + 20, (element4).tweet_xid.iter().count())
                        @ffi.store32((base5) + 16, @ffi.str2ptr((element4).tweet_xid))

                  }
                  @ffi.store32((return_area) + 8, ((payload3).tweets).length())
                  @ffi.store32((return_area) + 4, address)

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportListAllFollowedTweetsPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {

                  for index = 0; index < (@ffi.load32((p0) + 8)); index = index + 1 {
                        let base3 = (@ffi.load32((p0) + 4)) + (index * 24)
                        @ffi.free(@ffi.load32((base3) + 0))
                        @ffi.free(@ffi.load32((base3) + 8))
                        @ffi.free(@ffi.load32((base3) + 16))

                  }
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

pub fn wasmExportListUserTweets(p0 : Int, p1 : Int, p2 : Int, p3 : Int, p4 : Int) -> Int {

      let result = @ffi.ptr2str(p0)

      let result0 = @ffi.ptr2str(p2)

      let (result1) : (@api.ListTweetsResult) = @api.list_user_tweets(result, result0, (p4).to_uint());

      match result1 {
            Error(payload) => {
                  @ffi.store8((return_area) + 0, (0))
                  @ffi.store32((return_area) + 8, payload.iter().count())
                  @ffi.store32((return_area) + 4, @ffi.str2ptr(payload))

                  ()
            }
            Success(payload4) => {
                  @ffi.store8((return_area) + 0, (1))

                  let address = @ffi.malloc(((payload4).tweets).length() * 24);
                  for index = 0; index < ((payload4).tweets).length(); index = index + 1 {
                        let element5 : @api.Tweet = ((payload4).tweets)[(index)]
                        let base6 = address + (index * 24);
                        @ffi.store32((base6) + 4, (element5).user_xid.iter().count())
                        @ffi.store32((base6) + 0, @ffi.str2ptr((element5).user_xid))
                        @ffi.store32((base6) + 12, (element5).tweet_contents.iter().count())
                        @ffi.store32((base6) + 8, @ffi.str2ptr((element5).tweet_contents))
                        @ffi.store32((base6) + 20, (element5).tweet_xid.iter().count())
                        @ffi.store32((base6) + 16, @ffi.str2ptr((element5).tweet_xid))

                  }
                  @ffi.store32((return_area) + 8, ((payload4).tweets).length())
                  @ffi.store32((return_area) + 4, address)

                  ()
            }
            _ => panic()
      }
      return return_area

}

pub fn wasmExportListUserTweetsPostReturn(p0 : Int) -> Unit {

      match (@ffi.load8_u((p0) + 0)) {
            0 => {
                  @ffi.free(@ffi.load32((p0) + 4))

            }
            1 => {

                  for index = 0; index < (@ffi.load32((p0) + 8)); index = index + 1 {
                        let base3 = (@ffi.load32((p0) + 4)) + (index * 24)
                        @ffi.free(@ffi.load32((base3) + 0))
                        @ffi.free(@ffi.load32((base3) + 8))
                        @ffi.free(@ffi.load32((base3) + 16))

                  }
                  @ffi.free(@ffi.load32((p0) + 4))

            }
      }

}

