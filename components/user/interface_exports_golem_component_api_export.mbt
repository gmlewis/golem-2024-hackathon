// Generated by `wit-bindgen` 0.29.0. DO NOT EDIT!

pub fn wasmExportFollowing(p0 : Int, p1 : Int) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 : FollowingResult = following(result)
  let return_area = @ffi.malloc(8)
  let address = @ffi.malloc(result0.user_xids.length() * 8)
  for index = 0; index < result0.user_xids.length(); index = index + 1 {
    let element : String = result0.user_xids[index]
    let base = address + index * 8
    @ffi.store32(base + 4, element.iter().count())
    @ffi.store32(base + 0, @ffi.str2ptr(element))
  }
  @ffi.store32(return_area + 4, result0.user_xids.length())
  @ffi.store32(return_area + 0, address)
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportFollowingPostReturn(p0 : Int) -> Unit {
  for index = 0; index < @ffi.load32(p0 + 4); index = index + 1 {
    let base = @ffi.load32(p0 + 0) + index * 8
    @ffi.free(@ffi.load32(base + 0))
  }
  @ffi.free(@ffi.load32(p0 + 0))
}

pub fn wasmExportFollowUser(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 : SuccessOrFailureResult = follow_user(result, result0)
  let return_area = @ffi.malloc(12)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload4.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload4))
      ()
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportFollowUserPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => @ffi.free(@ffi.load32(p0 + 4))
  }
}

pub fn wasmExportUnfollowUser(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 : SuccessOrFailureResult = unfollow_user(result, result0)
  let return_area = @ffi.malloc(12)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload4.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload4))
      ()
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportUnfollowUserPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => @ffi.free(@ffi.load32(p0 + 4))
  }
}

pub fn wasmExportPostTweet(p0 : Int, p1 : Int, p2 : Int, p3 : Int) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 : SuccessOrFailureResult = post_tweet(result, result0)
  let return_area = @ffi.malloc(12)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload4.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload4))
      ()
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportPostTweetPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => @ffi.free(@ffi.load32(p0 + 4))
  }
}

pub fn wasmExportGetTweet(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int,
  p5 : Int
) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p2)
  let result1 = @ffi.ptr2str(p4)
  let result2 : SuccessOrFailureResult = get_tweet(result, result0, result1)
  let return_area = @ffi.malloc(12)
  match result2 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload5) => {
      @ffi.store8(return_area + 0, 1)
      @ffi.store32(return_area + 8, payload5.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload5))
      ()
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportGetTweetPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => @ffi.free(@ffi.load32(p0 + 4))
  }
}

pub fn wasmExportListAllFollowedTweets(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int
) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p3)
  let result1 : ListTweetsResult = list_all_followed_tweets(
    result,
    p2.to_uint(),
    result0,
  )
  let return_area = @ffi.malloc(12)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      let address = @ffi.malloc(payload4.tweets.length() * 24)
      for index = 0; index < payload4.tweets.length(); index = index + 1 {
        let element5 : Tweet = payload4.tweets[index]
        let base6 = address + index * 24
        @ffi.store32(base6 + 4, element5.user_xid.iter().count())
        @ffi.store32(base6 + 0, @ffi.str2ptr(element5.user_xid))
        @ffi.store32(base6 + 12, element5.tweet_contents.iter().count())
        @ffi.store32(base6 + 8, @ffi.str2ptr(element5.tweet_contents))
        @ffi.store32(base6 + 20, element5.tweet_xid.iter().count())
        @ffi.store32(base6 + 16, @ffi.str2ptr(element5.tweet_xid))
      }
      @ffi.store32(return_area + 8, payload4.tweets.length())
      @ffi.store32(return_area + 4, address)
      ()
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportListAllFollowedTweetsPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => {
      for index = 0; index < @ffi.load32(p0 + 8); index = index + 1 {
        let base3 = @ffi.load32(p0 + 4) + index * 24
        @ffi.free(@ffi.load32(base3 + 0))
        @ffi.free(@ffi.load32(base3 + 8))
        @ffi.free(@ffi.load32(base3 + 16))
      }
      @ffi.free(@ffi.load32(p0 + 4))
    }
  }
}

pub fn wasmExportListUserTweets(
  p0 : Int,
  p1 : Int,
  p2 : Int,
  p3 : Int,
  p4 : Int
) -> Int {
  let result = @ffi.ptr2str(p0)
  let result0 = @ffi.ptr2str(p3)
  let result1 : ListTweetsResult = list_user_tweets(
    result,
    p2.to_uint(),
    result0,
  )
  let return_area = @ffi.malloc(12)
  match result1 {
    Error(payload) => {
      @ffi.store8(return_area + 0, 0)
      @ffi.store32(return_area + 8, payload.iter().count())
      @ffi.store32(return_area + 4, @ffi.str2ptr(payload))
      ()
    }
    Success(payload4) => {
      @ffi.store8(return_area + 0, 1)
      let address = @ffi.malloc(payload4.tweets.length() * 24)
      for index = 0; index < payload4.tweets.length(); index = index + 1 {
        let element5 : Tweet = payload4.tweets[index]
        let base6 = address + index * 24
        @ffi.store32(base6 + 4, element5.user_xid.iter().count())
        @ffi.store32(base6 + 0, @ffi.str2ptr(element5.user_xid))
        @ffi.store32(base6 + 12, element5.tweet_contents.iter().count())
        @ffi.store32(base6 + 8, @ffi.str2ptr(element5.tweet_contents))
        @ffi.store32(base6 + 20, element5.tweet_xid.iter().count())
        @ffi.store32(base6 + 16, @ffi.str2ptr(element5.tweet_xid))
      }
      @ffi.store32(return_area + 8, payload4.tweets.length())
      @ffi.store32(return_area + 4, address)
      ()
    }
    _ => panic()
  }
  @ffi.free(return_area)
  return return_area
}

pub fn wasmExportListUserTweetsPostReturn(p0 : Int) -> Unit {
  match @ffi.load8_u(p0 + 0) {
    0 => @ffi.free(@ffi.load32(p0 + 4))
    1 => {
      for index = 0; index < @ffi.load32(p0 + 8); index = index + 1 {
        let base3 = @ffi.load32(p0 + 4) + index * 24
        @ffi.free(@ffi.load32(base3 + 0))
        @ffi.free(@ffi.load32(base3 + 8))
        @ffi.free(@ffi.load32(base3 + 16))
      }
      @ffi.free(@ffi.load32(p0 + 4))
    }
  }
}
